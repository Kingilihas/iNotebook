

const express = require('express');
const router = express.Router();
const User = require('../models/User')
const { body, validationResult } = require('express-validator');
const bcrypt = require('bcryptjs');

// to send jwt token to user 
var jwt = require('jsonwebtoken');
// my seceret sign used in jwt token
const Sign = "Ilihas#213"

const fetchuser = require('../middleware/fetchdata')


// endpoint create user is used create a new and enter the details in database


// ROUTE 1 : end point creation , the endpoint used here is /createuser or /api/auth/createuser
router.post('/createuser', [
   body('name').isLength({ min: 5 }), // fields   with the required parameters
   body('email').isEmail(),// fields  with  the required parameters
   body('password').isLength({ min: 5 })// fields   with the required parameters
], async (req, res) => {

   // if bad request happens return errors if validation fails

   const errors = validationResult(req);
   if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
   }

   let success =false
   // the User Creation begins from here 
   try {
         
    
      // try catch just check for error and if error comes then jump to catcj block
      let user = await User.findOne({ email: req.body.email })// findone() method checks for given field is present or not in database for eg here it is email
      if (user) {
         return res.status(400).json({success, errors: "Sorry a User already exists with that email" });
      }

      // to generate the salt use following code
      const salt = await bcrypt.genSalt(10);
      let secPass = await bcrypt.hash(req.body.password, salt)
   
      // secPass- Securedpassword generated by hash and salt

      user = await User.create({
         name: req.body.name,
         password: secPass,
         email: req.body.email
      })

      const data = {
         user: {
            id: user.id,
         }
      }

      // my authToken
      const authToken = jwt.sign(data, Sign)
      // if user is valid then return user
     
      res.json({success:true, authToken: authToken })
   }
   catch (error) {
   
      console.error(error);
      res.status(500).send("Some error occured");
   }
})




// ROUTE 2 : end point login is used to authenticate the current user accessing database

// "/api/auth/login"

router.post('/login', [
   body('email', 'enter a valid email').isEmail(),// fields  with  the required parameters
   body('password', 'password cannot be blank').exists()// fields   with the required parameters
], async (req, res) => {

   let sucess=false
   // if entred email is not in correct format or password is blank then this error will be displayed
   const errors = validationResult(req);
   if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
   }


   const { email, password } = req.body;

   try {


      let user = await User.findOne({ email })  // check that given email of user exists in the database

      if (!user) {
          
        
         return res.status(400).json({sucess, errors: "Invalid credentials please check" }); // if enter email is not exist
      }


      // if email match try to comapare the passwords
      // user.password is password which is in database
      // password is entered password
      const comparePassword = await bcrypt.compare(password, user.password);  // this function returns true or false

      if (!comparePassword) {  // no password match
         return res.status(400).json({ sucess,errors: "Invalid credentials please check" });
      }

      // if the password matches retrun the authentication token
      const data = {
         user: {
            id: user.id
         }
      }
         sucess = true
      // sign the token
      const authToken = jwt.sign(data, Sign)
      // if user is valid then return token with sign
      res.json({sucess, authToken: authToken })


   } catch (error) {


      console.error(error);
      res.status(500).send("Interval server error ");


   }



})



// ROUTE 3 : MOVE USER TO PROFILE 

router.post('/getuser', fetchuser, async (req, res) => {

  
   try {

     // getting the user id
      let userId=req.user.id;

      // getting the all the details of the user except password the details are searched by id 
      const user=await User.findById(userId).select("-password")

       
      
    res.send(user)
     
   } catch (error) {



 
      console.error(error);
      res.status(500).send("Interval server error ");


   }



})






















module.exports = router